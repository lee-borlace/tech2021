name: 'Infra, Build, Test, Deploy'
 
on:
  push:
    branches:
      - master
      # - deploy-test
      # - deploy-stage
    # paths:
    #   - 'deploy/terraform/**'
  pull_request:
    branches:
      - master
      # - deploy-test
      # - deploy-stage
    # paths:
    #   - 'deploy/terraform/**'      
  workflow_dispatch:
 
jobs:
  
  # ***********************************************************************
  # JOB : Terraform TEST
  # ***********************************************************************
  terraform:
    name: 'Terraform TEST'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      TF_VAR_resource_group_name: "lee-syd-tst-arg-rwa"
      TF_VAR_environment_abbreviation : "tst"
    runs-on: ubuntu-latest
    environment: Test
 
    defaults:
      run:
        shell: bash
        working-directory: deploy/terraform
 
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1

    # - name: Script executable
    #   run: chmod +x ./terraform.sh

    - name: Terraform Plan and Apply
      run: ./terraform.sh

    # - name: Terraform General Init
    #   id: generalinit
    #   run: terraform init -no-color
    #   continue-on-error: false      

    # - name: Terraform Select Workspace
    #   id: select
    #   run: terraform workspace select test -no-color
    #   continue-on-error: false      

    # - name: Terraform Workspace Init
    #   id: workspaceinit
    #   run: terraform init -no-color
    #   continue-on-error: false

    # - name: Terraform Validate
    #   id: validate
    #   run: terraform validate -no-color
    #   continue-on-error: false

    # - name: Terraform Plan
    #   id: plan
    #   run: terraform plan -no-color
    #   continue-on-error: false

    # - name : Write Terraform Plan to PR Message
    #   uses: actions/github-script@0.9.0
    #   if: github.event_name == 'pull_request'
    #   env:
    #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
    #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
    #       #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
    #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
    #       <details><summary>Show Plan</summary>
          
    #       \`\`\`\n
    #       ${process.env.PLAN}
    #       \`\`\`
          
    #       </details>
          
    #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
    #       github.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: output
    #       })      

    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/master'      
    #   id: apply
    #   run: terraform apply -no-color -input=false -auto-approve
    #   continue-on-error: false